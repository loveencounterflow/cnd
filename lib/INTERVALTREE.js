// Generated by CoffeeScript 1.9.1
(function() {
  var CND, alert, badge, debug, echo, get_m, get_m_sym, help, info, is_decorated_sym, log, m_sym, parent_sym, rpr, show, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'SCRATCH/interval-trees/red-black-trees';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  is_decorated_sym = Symbol('is_decorated');

  parent_sym = Symbol('parent');

  get_m_sym = Symbol('get_m');

  m_sym = Symbol('m');

  this.new_tree = function() {
    return {
      '~isa': 'CND/interval-tree',
      '%self': (require('functional-red-black-tree'))()
    };
  };

  this.add_interval = function(me, interval) {
    me['%self'] = me['%self'].insert(interval[0], interval);
    return me;
  };

  get_m = function() {
    var R, left_m, ref, ref1, ref2, ref3, right_m;
    if (typeof R !== "undefined" && R !== null) {
      return (R = this[m_sym]);
    }
    left_m = (ref = (ref1 = this['left']) != null ? ref1[get_m_sym]() : void 0) != null ? ref : -Infinity;
    right_m = (ref2 = (ref3 = this['right']) != null ? ref3[get_m_sym]() : void 0) != null ? ref2 : -Infinity;
    return this[m_sym] = Math.max(left_m, right_m, this['value'][1]);
  };

  this._decorate = function(node) {
    var left_node, right_node;
    if (node[is_decorated_sym]) {
      return null;
    }
    node[is_decorated_sym] = true;
    node[get_m_sym] = get_m;
    if ((left_node = node['left']) != null) {

      /* TAINT use symbols */
      left_node[parent_sym] = node;
      left_node[get_m_sym] = get_m;
      this._decorate(left_node);
    }
    if ((right_node = node['right']) != null) {
      right_node[parent_sym] = node;
      right_node[get_m_sym] = get_m;
      this._decorate(right_node);
    }
    return null;
  };

  this.find = function(me, probe) {
    var root;
    root = me['%self']['root'];
    this._decorate(root);
    if (!CND.isa_list(probe)) {
      probe = [probe, probe];
    }
    return this._find(root, probe, []);
  };

  this._find = function(node, probe, R) {
    var left_node, node_hi, node_lo, probe_hi, probe_lo, ref, right_node;
    probe_lo = probe[0], probe_hi = probe[1];
    ref = node['value'], node_lo = ref[0], node_hi = ref[1];
    if (!(probe_lo > node_hi || probe_hi < node_lo)) {
      R.push(node);
    }
    left_node = node['left'];
    right_node = node['right'];
    if ((left_node == null) && (right_node == null)) {
      return R;
    }
    if (node['left'] == null) {
      return this._find(right_node, probe, R);
    }
    if (left_node[get_m_sym]() < probe_lo) {
      return this._find(right_node, probe, R);
    }
    return this._find(left_node, probe, R);
  };

  show = function(node) {
    var left_node, right_node, this_key, this_m, this_value;
    this_key = node['key'];
    this_value = node['value'];
    this_m = node[get_m_sym]();
    help(this_key, this_value, this_m);
    if ((left_node = node['left']) != null) {
      show(left_node);
    }
    if ((right_node = node['right']) != null) {
      show(right_node);
    }
    return null;
  };

  this._demo = function() {
    var i, interval, intervals, j, k, len, len1, n, node, ref, tree;
    tree = this.new_tree();
    intervals = [[3, 7, 'A'], [5, 7, 'B'], [8, 12, 'C'], [2, 14, 'D'], [4, 4, 'E']];
    for (i = 0, len = intervals.length; i < len; i++) {
      interval = intervals[i];
      this.add_interval(tree, interval);
    }
    this._decorate(tree['%self']['root']);
    show(tree['%self']['root']);
    for (n = j = 0; j <= 15; n = ++j) {
      help(n);
      ref = this.find(tree, n);
      for (k = 0, len1 = ref.length; k < len1; k++) {
        node = ref[k];
        urge('  ', node['key'], node['value']);
      }
    }
    return null;
  };

  if (module.parent == null) {
    CND.dir(this);
    this._demo();
  }

}).call(this);
