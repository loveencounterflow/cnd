// Generated by CoffeeScript 1.10.0
(function() {
  var CND, log, rpr;

  CND = require('./main');

  rpr = CND.rpr;

  log = console.log;

  this.replacer = function(key, value) {
    var R, type;
    switch (type = CND.type_of(value)) {
      case 'set':
        R = {
          '~isa': '-x-set',
          '%self': Array.from(value)
        };
        break;
      case 'map':
        R = {
          '~isa': '-x-map',
          '%self': Array.from(value)
        };
        break;
      case 'function':
        R = {
          '~isa': '-x-function',
          '%self': value.toString()
        };
        break;
      default:
        R = value;
    }
    return R;
  };

  this.reviver = function(key, value) {
    var R, type;
    switch (type = CND.type_of(value)) {
      case '-x-set':
        R = new Set(value['%self']);
        break;
      case '-x-map':
        R = new Map(value['%self']);
        break;
      case '-x-function':
        R = (eval("[ " + value['%self'] + " ]"))[0];
        break;
      default:
        R = value;
    }
    return R;
  };

  this.stringify = function(value, replacer, spaces) {
    if (replacer == null) {
      replacer = this.replacer;
    }
    return JSON.stringify(value, replacer, spaces);
  };

  this.parse = function(text, reviver) {
    if (reviver == null) {
      reviver = this.reviver;
    }
    return JSON.parse(text, reviver);
  };

  this._demo = function() {
    var XJSON, d, e;
    XJSON = this;
    e = new Set('xy');
    e.add(new Set('abc'));
    d = ['A', 'B', e];
    help(d);
    info(XJSON.stringify(d));
    return info(XJSON.parse(XJSON.stringify(d)));
  };

  this.replacer = this.replacer.bind(this);

  this.reviver = this.reviver.bind(this);

  this.stringify = this.stringify.bind(this);

  this.parse = this.parse.bind(this);

  this._demo = this._demo.bind(this);

  if (module.parent == null) {
    this._demo();
  }

}).call(this);

//# sourceMappingURL=XJSON.js.map
