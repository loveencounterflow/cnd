// Generated by CoffeeScript 1.9.3
(function() {
  var CND, SL, TRM, alert, badge, debug, echo, help, include, info, log, njs_path, praise, rpr, test, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  njs_path = require('path');

  TRM = require('./TRM');

  rpr = TRM.rpr.bind(TRM);

  badge = 'BITSNPIECES/test';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  praise = TRM.get_logger('praise', badge);

  echo = TRM.echo.bind(TRM);

  CND = require('./main');

  SL = CND.INTERSKIPLIST;

  test = require('guy-test');

  this['test interval tree 1'] = function(T) {
    var find, hi, i, id, intervals, len, lo, ref, skiplist, value;
    find = function(skiplist, probe) {
      var R;
      R = SL.find_any_ids(skiplist, probe);
      R.sort();
      return R.join(',');
    };
    skiplist = SL["new"]();
    intervals = [[1, 3, 'A'], [2, 14, 'B'], [3, 7, 'C'], [4, 4, 'D'], [5, 7, 'E'], [8, 12, 'F1'], [8, 12, 'F2'], [8, 22, 'G'], [10, 13, 'H']];
    for (i = 0, len = intervals.length; i < len; i++) {
      ref = intervals[i], lo = ref[0], hi = ref[1], id = ref[2], value = ref[3];
      SL.add_interval(skiplist, lo, hi, id, value);
    }
    T.eq(find(skiplist, 0), '');
    T.eq(find(skiplist, 1), 'A');
    T.eq(find(skiplist, 2), 'A,B');
    T.eq(find(skiplist, 3), 'A,B,C');
    T.eq(find(skiplist, 4), 'B,C,D');
    T.eq(find(skiplist, 5), 'B,C,E');
    T.eq(find(skiplist, 6), 'B,C,E');
    T.eq(find(skiplist, 7), 'B,C,E');
    T.eq(find(skiplist, 8), 'B,F1,F2,G');
    T.eq(find(skiplist, 9), 'B,F1,F2,G');
    T.eq(find(skiplist, 10), 'B,F1,F2,G,H');
    T.eq(find(skiplist, 11), 'B,F1,F2,G,H');
    T.eq(find(skiplist, 12), 'B,F1,F2,G,H');
    T.eq(find(skiplist, 13), 'B,G,H');
    T.eq(find(skiplist, 14), 'B,G');
    T.eq(find(skiplist, 15), 'G');
    T.eq(find(skiplist, 16), 'G');
    T.eq(find(skiplist, 17), 'G');
    T.eq(find(skiplist, 18), 'G');
    return null;
  };

  this['_test interval tree 2'] = function() {
    var error_count, i, interval, intervals, len, tree;
    tree = SL.new_tree();
    intervals = [[17, 19, 'A'], [5, 8, 'B'], [21, 24, 'C'], [4, 8, 'D'], [15, 18, 'E'], [7, 10, 'F'], [16, 22, 'G']];
    for (i = 0, len = intervals.length; i < len; i++) {
      interval = intervals[i];
      SL.add_interval(tree, interval);
    }
    SL._decorate(tree['%self']['root']);
    show(tree['%self']['root']);
    error_count = 0;
    debug(rpr(find(tree, [8, 9])));
    debug(rpr(find(tree, [5, 8])));
    debug(rpr(find(tree, [21, 24])));
    debug(rpr(find(tree, [4, 8])));
    if (error_count !== 0) {
      throw Error("there were " + error_count + " errors");
    }
    return null;
  };

  this['test type_of'] = function(T) {
    T.eq(CND.type_of(new WeakMap()), 'weakmap');
    T.eq(CND.type_of(new Map()), 'map');
    T.eq(CND.type_of(new Set()), 'set');
    T.eq(CND.type_of(new Date()), 'date');
    T.eq(CND.type_of(new Error()), 'error');
    T.eq(CND.type_of([]), 'list');
    T.eq(CND.type_of(true), 'boolean');
    T.eq(CND.type_of(false), 'boolean');
    T.eq(CND.type_of((function() {})), 'function');
    T.eq(CND.type_of((function*() {
      return (yield 123);
    })()), 'generator');
    T.eq(CND.type_of(null), 'null');
    T.eq(CND.type_of('helo'), 'text');
    T.eq(CND.type_of(void 0), 'undefined');
    T.eq(CND.type_of(arguments), 'arguments');
    T.eq(CND.type_of(global), 'global');
    T.eq(CND.type_of(/^xxx$/g), 'regex');
    T.eq(CND.type_of({}), 'pod');
    T.eq(CND.type_of(NaN), 'nan');
    T.eq(CND.type_of(1 / 0), 'infinity');
    T.eq(CND.type_of(-1 / 0), 'infinity');
    T.eq(CND.type_of(12345), 'number');
    T.eq(CND.type_of(new Buffer('helo')), 'buffer');
    T.eq(CND.type_of(new ArrayBuffer(42)), 'arraybuffer');
    return null;
  };

  this['test size_of'] = function(T) {
    T.eq(CND.size_of([1, 2, 3, 4]), 4);
    T.eq(CND.size_of(new Buffer([1, 2, 3, 4])), 4);
    T.eq(CND.size_of('𣁬𡉜𠑹𠅁'), 2 * (Array.from('𣁬𡉜𠑹𠅁')).length);
    T.eq(CND.size_of('𣁬𡉜𠑹𠅁', {
      count: 'codepoints'
    }), (Array.from('𣁬𡉜𠑹𠅁')).length);
    T.eq(CND.size_of('𣁬𡉜𠑹𠅁', {
      count: 'codeunits'
    }), 2 * (Array.from('𣁬𡉜𠑹𠅁')).length);
    T.eq(CND.size_of('𣁬𡉜𠑹𠅁', {
      count: 'bytes'
    }), (new Buffer('𣁬𡉜𠑹𠅁', 'utf-8')).length);
    T.eq(CND.size_of('abcdefghijklmnopqrstuvwxyz'), 26);
    T.eq(CND.size_of('abcdefghijklmnopqrstuvwxyz', {
      count: 'codepoints'
    }), 26);
    T.eq(CND.size_of('abcdefghijklmnopqrstuvwxyz', {
      count: 'codeunits'
    }), 26);
    T.eq(CND.size_of('abcdefghijklmnopqrstuvwxyz', {
      count: 'bytes'
    }), 26);
    T.eq(CND.size_of('ä'), 1);
    T.eq(CND.size_of('ä', {
      count: 'codepoints'
    }), 1);
    T.eq(CND.size_of('ä', {
      count: 'codeunits'
    }), 1);
    T.eq(CND.size_of('ä', {
      count: 'bytes'
    }), 2);
    T.eq(CND.size_of(new Map([['foo', 42], ['bar', 108]])), 2);
    T.eq(CND.size_of(new Set(['foo', 42, 'bar', 108])), 4);
    T.eq(CND.size_of({
      'foo': 42,
      'bar': 108,
      'baz': 3
    }), 3);
    return T.eq(CND.size_of({
      '~isa': 'XYZ/yadda',
      'foo': 42,
      'bar': 108,
      'baz': 3
    }), 4);
  };

  this._main = function(handler) {
    return test(this, {
      'timeout': 2500
    });
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  if (module.parent == null) {
    include = ['test type_of'];
    this._main();
  }

}).call(this);
