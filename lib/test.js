// Generated by CoffeeScript 1.9.1
(function() {
  var CND, TRM, alert, assert, badge, debug, echo, eq, help, info, log, njs_path, praise, rpr, urge, warn, whisper,
    slice = [].slice;

  njs_path = require('path');

  TRM = require('./TRM');

  rpr = TRM.rpr.bind(TRM);

  badge = 'BITSNPIECES/test';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  praise = TRM.get_logger('praise', badge);

  echo = TRM.echo.bind(TRM);

  assert = require('assert');

  CND = require('./main');

  eq = (function(_this) {
    return function() {
      var P, p;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      whisper(P);
      if (!CND.equals.apply(CND, P)) {
        throw new Error("not equal: \n" + (((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = P.length; i < len; i++) {
            p = P[i];
            results.push(rpr(p));
          }
          return results;
        })()).join('\n')));
      }
    };
  })(this);

  this._test = function() {
    var error, error_count, method, name;
    error_count = 0;
    for (name in this) {
      method = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      whisper(name);
      try {
        method();
      } catch (_error) {
        error = _error;
        error_count += +1;
        warn(error['message']);
      }
    }
    if (error_count === 0) {
      help("tests completed successfully");
    }
    return process.exit(error_count);
  };

  this['test interval tree'] = function() {
    var ITREE, i, interval, intervals, len, search, show, tree;
    ITREE = CND.INTERVALTREE;
    show = function(node) {
      var left_node, ref, ref1, right_node, this_key, this_m, this_value;
      this_key = node['key'];
      this_value = node['value'];
      this_m = ITREE._get_m(node);
      help(this_value, this_m, '->', (ref = (ref1 = ITREE._get_parent(node)) != null ? ref1['value'] : void 0) != null ? ref : './.');
      if ((left_node = node['left']) != null) {
        show(left_node);
      }
      if ((right_node = node['right']) != null) {
        show(right_node);
      }
      return null;
    };
    search = function() {
      var i, n, node, results;
      results = [];
      for (n = i = 0; i <= 15; n = ++i) {
        help(n);
        results.push((function() {
          var j, len, ref, results1;
          ref = ITREE.find(tree, n);
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            node = ref[j];
            results1.push(urge('  ', node['key'], node['value']));
          }
          return results1;
        })());
      }
      return results;
    };
    tree = ITREE.new_tree();
    intervals = [[3, 7, 'A'], [5, 7, 'B'], [8, 12, 'C1'], [8, 12, 'C2'], [2, 14, 'D'], [4, 4, 'E'], [10, 13, 'F'], [8, 22, 'G'], [1, 3, 'H']];
    for (i = 0, len = intervals.length; i < len; i++) {
      interval = intervals[i];
      ITREE.add_interval(tree, interval);
    }
    ITREE._decorate(tree['%self']['root']);
    show(tree['%self']['root']);
    eq(ITREE.find(tree, 0), []);
    eq(ITREE.find(tree, 1), [[1, 3, "H"]]);
    eq(ITREE.find(tree, 2), [[2, 14, "D"], [1, 3, "H"]]);
    eq(ITREE.find(tree, 3), [[3, 7, "A"], [2, 14, "D"], [1, 3, "H"]]);
    eq(ITREE.find(tree, 4), [[3, 7, "A"], [2, 14, "D"]]);
    eq(ITREE.find(tree, 5), [[5, 7, "B"], [3, 7, "A"], [2, 14, "D"]]);
    eq(ITREE.find(tree, 6), [[5, 7, "B"], [3, 7, "A"], [2, 14, "D"]]);
    eq(ITREE.find(tree, 7), [[5, 7, "B"], [3, 7, "A"], [2, 14, "D"]]);
    eq(ITREE.find(tree, 8), [[2, 14, "D"], [8, 22, "G"]]);
    eq(ITREE.find(tree, 9), [[2, 14, "D"], [8, 22, "G"]]);
    eq(ITREE.find(tree, 10), [[2, 14, "D"], [8, 22, "G"]]);
    eq(ITREE.find(tree, 11), [[2, 14, "D"], [8, 22, "G"]]);
    eq(ITREE.find(tree, 12), [[2, 14, "D"], [8, 22, "G"]]);
    eq(ITREE.find(tree, 13), [[2, 14, "D"], [8, 22, "G"]]);
    eq(ITREE.find(tree, 14), [[2, 14, "D"], [8, 22, "G"]]);
    eq(ITREE.find(tree, 15), [[8, 22, "G"]]);
    eq(ITREE.find(tree, 16), [[8, 22, "G"]]);
    eq(ITREE.find(tree, 17), [[8, 22, "G"]]);
    eq(ITREE.find(tree, 18), [[8, 22, "G"]]);
    return null;
  };

  if (module.parent == null) {
    this._test();
  }

}).call(this);
