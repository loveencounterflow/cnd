// Generated by CoffeeScript 1.9.3
(function() {
  var CND, SL, TRM, alert, badge, debug, echo, eq, help, info, log, njs_path, praise, rpr, urge, warn, whisper,
    slice = [].slice;

  njs_path = require('path');

  TRM = require('./TRM');

  rpr = TRM.rpr.bind(TRM);

  badge = 'BITSNPIECES/test';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  praise = TRM.get_logger('praise', badge);

  echo = TRM.echo.bind(TRM);

  CND = require('./main');

  SL = CND.INTERSKIPLIST;

  eq = (function(_this) {
    return function() {
      var P, p;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      whisper(P);
      if (!CND.equals.apply(CND, P)) {
        warn("not equal: \n" + (((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = P.length; i < len; i++) {
            p = P[i];
            results.push(rpr(p));
          }
          return results;
        })()).join('\n')));
        return 1;
      }
      return 0;
    };
  })(this);

  this._test = function() {
    var error, error_count, method, name;
    error_count = 0;
    for (name in this) {
      method = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      whisper(name);
      try {
        method();
      } catch (_error) {
        error = _error;
        error_count += +1;
        warn(error['message']);
      }
    }
    if (error_count === 0) {
      help("tests completed successfully");
    }
    return process.exit(error_count);
  };

  this['test interval tree 1'] = function() {
    var error_count, find, hi, i, id, intervals, len, lo, ref, skiplist, value;
    find = function(skiplist, probe) {
      var R;
      R = SL.find_any_ids(skiplist, probe);
      R.sort();
      return R.join(',');
    };
    skiplist = SL["new"]();
    intervals = [[1, 3, 'A'], [2, 14, 'B'], [3, 7, 'C'], [4, 4, 'D'], [5, 7, 'E'], [8, 12, 'F1'], [8, 12, 'F2'], [8, 22, 'G'], [10, 13, 'H']];
    for (i = 0, len = intervals.length; i < len; i++) {
      ref = intervals[i], lo = ref[0], hi = ref[1], id = ref[2], value = ref[3];
      SL.add_interval(skiplist, lo, hi, id, value);
    }
    error_count = 0;
    error_count += eq(find(skiplist, 0), '');
    error_count += eq(find(skiplist, 1), 'A');
    error_count += eq(find(skiplist, 2), 'A,B');
    error_count += eq(find(skiplist, 3), 'A,B,C');
    error_count += eq(find(skiplist, 4), 'B,C,D');
    error_count += eq(find(skiplist, 5), 'B,C,E');
    error_count += eq(find(skiplist, 6), 'B,C,E');
    error_count += eq(find(skiplist, 7), 'B,C,E');
    error_count += eq(find(skiplist, 8), 'B,F1,F2,G');
    error_count += eq(find(skiplist, 9), 'B,F1,F2,G');
    error_count += eq(find(skiplist, 10), 'B,F1,F2,G,H');
    error_count += eq(find(skiplist, 11), 'B,F1,F2,G,H');
    error_count += eq(find(skiplist, 12), 'B,F1,F2,G,H');
    error_count += eq(find(skiplist, 13), 'B,G,H');
    error_count += eq(find(skiplist, 14), 'B,G');
    error_count += eq(find(skiplist, 15), 'G');
    error_count += eq(find(skiplist, 16), 'G');
    error_count += eq(find(skiplist, 17), 'G');
    error_count += eq(find(skiplist, 18), 'G');
    if (error_count !== 0) {
      throw Error("there were " + error_count + " errors");
    }
    return null;
  };

  this['_test interval tree 2'] = function() {
    var error_count, i, interval, intervals, len, tree;
    tree = SL.new_tree();
    intervals = [[17, 19, 'A'], [5, 8, 'B'], [21, 24, 'C'], [4, 8, 'D'], [15, 18, 'E'], [7, 10, 'F'], [16, 22, 'G']];
    for (i = 0, len = intervals.length; i < len; i++) {
      interval = intervals[i];
      SL.add_interval(tree, interval);
    }
    SL._decorate(tree['%self']['root']);
    show(tree['%self']['root']);
    error_count = 0;
    debug(rpr(find(tree, [8, 9])));
    debug(rpr(find(tree, [5, 8])));
    debug(rpr(find(tree, [21, 24])));
    debug(rpr(find(tree, [4, 8])));
    if (error_count !== 0) {
      throw Error("there were " + error_count + " errors");
    }
    return null;
  };

  if (module.parent == null) {
    this._test();
  }

}).call(this);
